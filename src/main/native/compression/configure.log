--------------------
otc_zlib/./configure --static
Thu Oct 13 10:56:09 EDT 2016
Checking for gcc...
=== ztest15953.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest15953.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest15953.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest15953.c

Building static library libz.a version with gcc.

=== ztest15953.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest15953.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest15953 ztest15953.c
Checking for strerror... Yes.

=== ztest15953.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking for unistd.h... Yes.

=== ztest15953.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking for stdarg.h... Yes.

=== ztest15953.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest15953.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest15953 ztest15953.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest15953.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking for return value of vsnprintf()... Yes.

=== ztest15953.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest15953.c
Checking for attribute(visibility) support... Yes.
=== ztest15953.c ===
#include <immintrin.h>
int main(void)
{
    __m128i zero = _mm_setzero_si128();
    return 0;
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -msse2 ztest15953.c
Checking for SSE2 intrinsics ... Yes.
=== ztest15953.c ===
#include <immintrin.h>
#include <wmmintrin.h>
int main(void)
{
    __m128i a = _mm_setzero_si128();
    __m128i b = _mm_setzero_si128();
    __m128i c = _mm_clmulepi64_si128(a, b, 0x10);
    return 0;
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -mpclmul ztest15953.c
Checking for PCLMULQDQ intrinsics ... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -DX86_64 -DUNALIGNED_OK -DADLER32_UNROLL_LESS -DCRC32_UNROLL_LESS -UCHECK_SSE2 -DHAVE_SSE2 -DUSE_SSE4_2_CRC_HASH -DHAVE_PCLMULQDQ -DUSE_MEDIUM
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG) x86.o
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG) x86.lo
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -DX86_64 -DUNALIGNED_OK -DADLER32_UNROLL_LESS -DCRC32_UNROLL_LESS -UCHECK_SSE2 -DHAVE_SSE2 -DUSE_SSE4_2_CRC_HASH -DHAVE_PCLMULQDQ -DUSE_MEDIUM
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER =
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Linux
FILL_WINDOW_SSE_o = fill_window_sse.o
FILL_WINDOW_SSE_lo= fill_window_sse.lo
CRC_FOLDING_o = crc_folding.o
CRC_FOLDING_lo= crc_folding.lo
DEFLATE_QUICK_o=
DEFLATE_QUICK_lo=
--------------------


