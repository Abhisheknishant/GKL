plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.palantir.git-version' version '0.5.2'
}

repositories {
//    maven { url uri('/home/gspowley/.m2/repository/') }
    mavenLocal()
    mavenCentral()
    maven { url "https://artifactory.broadinstitute.org/artifactory/libs-snapshot/" }
}

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'org.broadinstitute:gatk-native-bindings:0.0.2'
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'

    testCompile 'com.github.samtools:htsjdk:2.4.1-36-g313bf83-SNAPSHOT'
//    testCompile 'com.github.samtools:htsjdk:2.4.1'
    testCompile 'org.testng:testng:6.9.9'
}

//===================================================================
// build
//===================================================================

task buildNativeLib(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    workingDir 'src/main/native'
    commandLine './build'
    outputs.files('src/main/native/libIntelGKL.so', 'src/main/native/libIntelGKL.dylib')

    // always run this task
    outputs.upToDateWhen {false}
}

compileJava.dependsOn(buildNativeLib)

task copyNativeLib(type: Copy) {
    from buildNativeLib.outputs.files
    into "$compileJava.destinationDir/com/intel/gkl/native"
}

buildNativeLib.finalizedBy copyNativeLib

task buildOnMac(type: Exec) {
    workingDir '.'
    commandLine 'scripts/buildOnMac.sh', project.ext.properties.mac

    onlyIf {project.hasProperty('mac')}
}

copyNativeLib.finalizedBy buildOnMac

task cleanNativeLib(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    workingDir 'src/main/native'
    commandLine './clean'
}

clean.dependsOn(cleanNativeLib)

//===================================================================
// test
//===================================================================

test {
    useTestNG()

    testLogging {
        if (!System.env.CI.toString().toBoolean()) {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

    // always rerun tests
    outputs.upToDateWhen { false }
}

//===================================================================
// release
//===================================================================

final isRelease = Boolean.getBoolean("release")
version = (isRelease ? gitVersion() : gitVersion() + "-SNAPSHOT").replaceAll(".dirty", "")

group = "com.intel"

jar {
    baseName = "intel-gkl"
    // include LICENSE file in jar
    from "LICENSE"
    exclude "log4j2.xml"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isRelease && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    doFirst {
        println "Attempting to upload version:$version"
    }
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.findProperty("sonatypeUsername"), password: project.findProperty("sonatypePassword"))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.findProperty("sonatypeUsername"), password: project.findProperty("sonatypePassword"))
            }

            pom.project {
                name 'Intel Genomics Kernel Library (GKL)'
                packaging 'jar'
                description 'Genomics compute kernels optimized for Intel Architecture'
                url 'https://github.com/Intel-HLS/GKL'

                scm {
                    connection 'scm:git@github.com:Intel-HLS/GKL.git'
                    developerConnection 'scm:git@github.com:Intel-HLS/GKL.git'
                    url 'scm:git@github.com:Intel-HLS/GKL.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/Intel-HLS/GKL/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
